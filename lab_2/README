*****************************************************************
Author:
	Gunamgari Sharath Reddy       
	P V S Dileep               	   
	Sahil Kumar Goyal              
Date:
	5/3/2013
	
*****************************************************************	
Assignment 2(a).
	Take a language which is a subset of C. You may take any other
	language (or its subset). Define its alphabets and the tokens 
	using regular expressions. From the tokens, generate the 
	transition diagrams and display them in form of a table.
	Take a sample program in the language you have considered. 
	Perform lexical analysis for the program and generate the symbol
	table. Also, your lexical analysis module should have error 
	detection capability.

Assignment 2(b).
	Implement a Lexical analyzer using lex for the same language
	considered above.
	
*****************************************************************
Compilation:
	g++ lexer.cpp				
	g++	lexer_minimal_munch.cpp
*****************************************************************
Run:
	./a.out input_1 grammer_1  < reg_lex 
	./a.out input_2 grammer_2  < reg_lex 
*****************************************************************	
Implementation:
	a) Parses the grammer_1 file and then generates the NFA for
	   each line.
	b) Combines all the NFA's and generates a single NFA.
	c) Converts the NFA to DFA
	d) Simulate the input_1 file on the DFA.
	e) Outputs the <token_class,optional attribute> for each lexeme
	   matched.
	   
*****************************************************************
Compilation of flex:
	flex analyser.l			
	gcc lex.yy.c -ll
*****************************************************************
Run of flex:
	./a.out < input_1
	./a.out < input_2
	./a.out < input_3

